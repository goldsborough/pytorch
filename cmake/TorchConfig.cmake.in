# FindTorch
# -------
#
# Finds the Torch library
#
# This will define the following variables:
#
#   TORCH_FOUND        -- True if the system has the Torch library
#   TORCH_INCLUDE_DIRS -- The include directories for torch
#   TORCH_LIBRARIES    -- Libraries to link to
#
# and the following imported targets:
#
#   Torch
#
# and the following functions:
#
#   torch_add_custom_op_library(<name> <source_files>)

get_filename_component(TORCH_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/../../" ABSOLUTE)

# if (@USE_CUDA@)
#   # The file public/cuda.cmake exclusively uses CAFFE2_USE_*.
#   # If Caffe2 was compiled with the libraries below, they must
#   # be found again when including the Caffe2 target.
#   set(CAFFE2_USE_CUDA @USE_CUDA@)
#   set(CAFFE2_USE_CUDNN @USE_CUDNN@)
#   set(CAFFE2_USE_TENSORRT @USE_TENSORRT@)
#   include("${CMAKE_CURRENT_LIST_DIR}/public/cuda.cmake")
#   if (@CAFFE2_USE_CUDA@ AND NOT CAFFE2_USE_CUDA)
#     message(FATAL_ERROR
#       "Your installed Caffe2 version uses CUDA but I cannot find the CUDA "
#       "libraries. Please set the proper CUDA prefixes and / or install "
#       "CUDA.")
#   endif()
#   if (@CAFFE2_USE_CUDNN@ AND NOT CAFFE2_USE_CUDNN)
#     message(FATAL_ERROR
#       "Your installed Caffe2 version uses cuDNN but I cannot find the cuDNN "
#       "libraries. Please set the proper cuDNN prefixes and / or install "
#       "cuDNN.")
#   endif()
#   if (@CAFFE2_USE_TENSORRT@ AND NOT CAFFE2_USE_TENSORRT)
#     message(FATAL_ERROR
#       "Your installed Caffe2 version uses TensorRT but I cannot find the TensorRT "
#       "libraries. Please set the proper TensorRT prefixes and / or install "
#       "TensorRT.")
#   endif()
# endif()

# set(TORCH_INCLUDE_DIRS
#   "${TORCH_ROOT}"
#   "${TORCH_ROOT}/aten/src"
#   "${TORCH_BUILD_PATH}/install/include"
#   "${TORCH_BUILD_PATH}/install/include/ATen"
#   "${TORCH_BUILD_PATH}/install/include/TH"
# )
#
# find_library(TORCH_LIBRARY torch
#   PATHS "${TORCH_BUILD_PATH}/install/lib" NO_DEFAULT_PATH)
#
# find_library(CAFFE2_LIBRARY caffe2
#   PATHS "${TORCH_BUILD_PATH}/install/lib" NO_DEFAULT_PATH)
#
# # If possible, link CUDA.
# find_package(CUDA)
# if (CUDA_FOUND)
#   find_library(CAFFE2_CUDA_LIBRARY caffe2_gpu
#     PATHS "${TORCH_BUILD_PATH}/install/lib" NO_DEFAULT_PATH)
#   set(TORCH_CUDA_LIBRARIES -L${CUDA_TOOLKIT_ROOT_DIR}/lib64 cuda nvrtc cudart nvToolsExt)
#   list(APPEND TORCH_INCLUDE_DIRS ${CUDA_TOOLKIT_INCLUDE})
# endif()
#
# add_library(Torch SHARED IMPORTED)
# set_target_properties(Torch PROPERTIES
#   IMPORTED_LOCATION "${TORCH_LIBRARY}"
#   INTERFACE_INCLUDE_DIRECTORIES "${TORCH_INCLUDE_DIRS}"
#   INTERFACE_LINK_LIBRARIES "${CAFFE2_LIBRARY};${CAFFE2_CUDA_LIBRARY};${TORCH_CUDA_LIBRARIES}"
#   CXX_STANDARD 11
# )
#
# set(TORCH_LIBRARIES Torch)

# Creates a shared library <name> with the correct include directories
# and linker flags set to include Torch header files and link with Torch
# libraries. Also sets the C++ standard version to C++11. All options
# can be override by specifying further options on the `<name>` CMake target.
function(torch_add_custom_op_library name source_files)
  add_library(${name} SHARED ${source_files})
  target_include_directories(${name} PUBLIC "${TORCH_INCLUDE_DIRS}")
  target_link_libraries(${name} "${TORCH_LIBRARIES}")
  target_compile_options(${name} PUBLIC -std=c++11)
endfunction(torch_add_custom_op_library)
